{
	"info": {
		"_postman_id": "22dd17ec-c33c-42c1-ae1d-ad92ff824ef3",
		"name": "PicnicTestAutomation",
		"description": "Automation of Gists",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "As a user, I want to create a public gist.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1e7a092a-1d2e-440b-b5ef-61b3c095f55f",
						"exec": [
							"pm.globals.set(\"GitHubUrl\", \"https://api.github.com\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "34e4abda-4bae-4316-ab75-654329ad6b90",
						"exec": [
							"let responseId = pm.response.json().id; ",
							"console.log('id: ', responseId);",
							"pm.globals.set(\"OutputId\", responseId);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"Created\");",
							"});",
							"pm.test(\"Response Body for test case 'As a user, I want to create a public gist.' matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "Sonika_01",
							"type": "string"
						},
						{
							"key": "username",
							"value": "pintudinesh@gmail.com",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"description\": \"Print my name\",\r\n  \"public\": true,\r\n  \"files\": {\r\n    \"my_name.rb\": {\r\n      \"content\": \"class PrintMyName\\n   def initialize(name)\\n      @name = name.capitalize\\n   end\\n   def sayHi\\n      puts \\\"My name is !\\\"\\n   end\\nend\\n\\nname = MyName.new(\\\"Dinesh\\\")\\nname.sayHi\"\r\n    },\r\n    \"my_name.py\": {\r\n      \"content\": \"class PrintMyName:\\n\\n    def __init__(self, name):\\n        self.name = name.capitalize()\\n       \\n    def sayHi(self):\\n        print \\\"My name is  \\\" + self.name + \\\"!\\\"\\n\\nname = MyName(\\\"Dinesh\\\")\\nname.sayHi()\"\r\n    },\r\n    \"print_my_name_ruby.txt\": {\r\n      \"content\": \"Run `ruby print_my_name.rb` to print My name is Dinesh\"\r\n    },\r\n    \"print_my_name_python.txt\": {\r\n      \"content\": \"Run `python print_my_name.py` to print My name is Dinesh\"\r\n    }\r\n  }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{GitHubUrl}}/gists",
					"host": [
						"{{GitHubUrl}}"
					],
					"path": [
						"gists"
					]
				}
			},
			"response": []
		},
		{
			"name": "As a user, I want to see an existing gist.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c6e64af-9740-4e10-99c5-78da024e0893",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"var idValue = pm.globals.get(\"OutputId\");",
							"pm.test(\"Response Body for test case 'As a user, I want to see my existing gist using id.' matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(idValue);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "Sonika_01",
							"type": "string"
						},
						{
							"key": "username",
							"value": "pintudinesh@gmail.com",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{GitHubUrl}}/gists/{{OutputId}}",
					"host": [
						"{{GitHubUrl}}"
					],
					"path": [
						"gists",
						"{{OutputId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "As a user, I want to edit an existing gist.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "018a4336-1cde-45fb-aedb-b1a549108dc9",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"pm.test(\"Response Body for test case 'As a user, I want to edit an existing gist.' matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is a new placeholder file.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "Sonika_01",
							"type": "string"
						},
						{
							"key": "username",
							"value": "pintudinesh@gmail.com",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"description\": \"Print my name\",\r\n  \"files\": {\r\n    \"print_my_name_ruby.txt\": {\r\n      \"content\": \"Run `ruby print_my_name.rb` to print My name is Dinesh\",\r\n      \"filename\": \"print_my_name.md\"\r\n    },\r\n    \"print_my_name_python.txt\": null,\r\n    \"new_file.txt\": {\r\n      \"content\": \"This is a new placeholder file.\"\r\n    }\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{GitHubUrl}}/gists/{{OutputId}}",
					"host": [
						"{{GitHubUrl}}"
					],
					"path": [
						"gists",
						"{{OutputId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "As a user, I want to delete an existing gist.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d0b7f197-83c7-4f1f-a426-abe00f1043a6",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"No Content\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "Sonika_01",
							"type": "string"
						},
						{
							"key": "username",
							"value": "pintudinesh@gmail.com",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{GitHubUrl}}/gists/{{OutputId}}",
					"host": [
						"{{GitHubUrl}}"
					],
					"path": [
						"gists",
						"{{OutputId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "As a user, I want to see a gist that does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c6e64af-9740-4e10-99c5-78da024e0893",
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"Not Found\");",
							"});",
							"pm.test(\"Response Body for test case 'As a user, I want to see a gist that does not exist' matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Not Found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "Sonika_01",
							"type": "string"
						},
						{
							"key": "username",
							"value": "pintudinesh@gmail.com",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{GitHubUrl}}/gists/abc",
					"host": [
						"{{GitHubUrl}}"
					],
					"path": [
						"gists",
						"abc"
					]
				}
			},
			"response": []
		},
		{
			"name": "As an unauthorized user, I should not be able to create a gist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a710f2d5-9920-4cf2-afc1-431d2d06682e",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"Unauthorized\");",
							"});",
							"pm.test(\"Response Body for test case 'As an unauthorized user, I should not be able to create a gist' matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Requires authentication\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3efc23c0-6bf7-475f-bbc8-97be7846d3fa",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"description\": \"Hello World Examples\",\r\n  \"public\": true,\r\n  \"files\": {\r\n    \"hello_world.rb\": {\r\n      \"content\": \"class HelloWorld\\n   def initialize(name)\\n      @name = name.capitalize\\n   end\\n   def sayHi\\n      puts \\\"Hello !\\\"\\n   end\\nend\\n\\nhello = HelloWorld.new(\\\"World\\\")\\nhello.sayHi\"\r\n    },\r\n    \"hello_world.py\": {\r\n      \"content\": \"class HelloWorld:\\n\\n    def __init__(self, name):\\n        self.name = name.capitalize()\\n       \\n    def sayHi(self):\\n        print \\\"Hello \\\" + self.name + \\\"!\\\"\\n\\nhello = HelloWorld(\\\"world\\\")\\nhello.sayHi()\"\r\n    },\r\n    \"hello_world_ruby.txt\": {\r\n      \"content\": \"Run `ruby hello_world.rb` to print Hello World\"\r\n    },\r\n    \"hello_world_python.txt\": {\r\n      \"content\": \"Run `python hello_world.py` to print Hello World\"\r\n    }\r\n  }\r\n}\r\n"
				},
				"url": {
					"raw": "{{GitHubUrl}}/gists",
					"host": [
						"{{GitHubUrl}}"
					],
					"path": [
						"gists"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}